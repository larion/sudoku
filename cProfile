 _  _  5  _  7  9  _  _  3 
 2  _  _  _  _  _  _  _  _ 
 3  4  8  _  _  _  _  _  _ 
 _  5  _  6  8  _  _  _  _ 
 _  7  _  2  _  4  _  8  _ 
 _  _  _  _  1  3  _  2  _ 
 _  _  _  _  _  _  4  7  1 
 _  _  _  _  _  _  _  _  6 
 8  _  _  7  9  _  3  _  _ 

 6  1  5  8  7  9  2  4  3 
 2  9  7  4  3  6  5  1  8 
 3  4  8  1  2  5  9  6  7 
 9  5  2  6  8  7  1  3  4 
 1  7  3  2  5  4  6  8  9 
 4  8  6  9  1  3  7  2  5 
 5  2  9  3  6  8  4  7  1 
 7  3  1  5  4  2  8  9  6 
 8  6  4  7  9  1  3  5  2 

human readable: 
 6  1  5  8  7  9  2  4  3 
 2  9  7  4  3  6  5  1  8 
 3  4  8  1  2  5  9  6  7 
 9  5  2  6  8  7  1  3  4 
 1  7  3  2  5  4  6  8  9 
 4  8  6  9  1  3  7  2  5 
 5  2  9  3  6  8  4  7  1 
 7  3  1  5  4  2  8  9  6 
 8  6  4  7  9  1  3  5  2 

repr: 
 {(7, 3): set([5]), (4, 7): set([8]), (1, 3): set([4]), (4, 8): set([9]), (3, 0): set([9]), (2, 8): set([7]), (8, 0): set([8]), (7, 8): set([6]), (5, 4): set([1]), (0, 7): set([4]), (5, 6): set([7]), (2, 6): set([9]), (1, 6): set([5]), (5, 1): set([8]), (3, 7): set([3]), (0, 3): set([8]), (8, 5): set([1]), (2, 5): set([5]), (5, 8): set([5]), (4, 0): set([1]), (1, 2): set([7]), (7, 4): set([4]), (6, 4): set([6]), (3, 3): set([6]), (0, 6): set([2]), (8, 1): set([6]), (7, 6): set([8]), (4, 4): set([5]), (6, 3): set([3]), (1, 5): set([6]), (8, 8): set([2]), (7, 2): set([1]), (3, 6): set([1]), (2, 2): set([8]), (7, 7): set([9]), (5, 7): set([2]), (5, 3): set([9]), (4, 1): set([7]), (1, 1): set([9]), (2, 7): set([6]), (3, 2): set([2]), (0, 0): set([6]), (6, 6): set([4]), (5, 0): set([4]), (7, 1): set([3]), (4, 5): set([4]), (0, 4): set([7]), (5, 5): set([3]), (1, 4): set([3]), (6, 0): set([5]), (7, 5): set([2]), (2, 3): set([1]), (2, 1): set([4]), (8, 7): set([5]), (6, 8): set([1]), (4, 2): set([3]), (1, 0): set([2]), (0, 8): set([3]), (6, 5): set([8]), (3, 5): set([7]), (0, 1): set([1]), (8, 3): set([7]), (7, 0): set([7]), (4, 6): set([6]), (6, 7): set([7]), (5, 2): set([6]), (6, 1): set([2]), (3, 1): set([5]), (8, 2): set([4]), (2, 4): set([2]), (3, 8): set([4]), (2, 0): set([3]), (1, 8): set([8]), (6, 2): set([9]), (4, 3): set([2]), (1, 7): set([1]), (8, 6): set([3]), (0, 5): set([9]), (3, 4): set([8]), (0, 2): set([5]), (8, 4): set([9])}
sudoku.regions: 
[frozenset([(0, 1), (1, 2), (0, 0), (2, 1), (1, 1), (2, 0), (2, 2), (1, 0), (0, 2)]), frozenset([(2, 5), (1, 3), (1, 4), (1, 5), (0, 5), (0, 4), (2, 3), (0, 3), (2, 4)]), frozenset([(2, 7), (2, 6), (2, 8), (0, 7), (0, 6), (1, 8), (1, 6), (1, 7), (0, 8)]), frozenset([(3, 2), (3, 0), (5, 2), (3, 1), (5, 0), (5, 1), (4, 2), (4, 1), (4, 0)]), frozenset([(5, 4), (3, 3), (4, 5), (4, 4), (5, 5), (4, 3), (5, 3), (3, 4), (3, 5)]), frozenset([(4, 7), (4, 6), (4, 8), (5, 6), (5, 7), (3, 8), (3, 6), (3, 7), (5, 8)]), frozenset([(7, 0), (8, 2), (7, 1), (8, 1), (6, 1), (8, 0), (6, 0), (6, 2), (7, 2)]), frozenset([(6, 4), (8, 3), (7, 3), (7, 4), (6, 3), (7, 5), (8, 5), (6, 5), (8, 4)]), frozenset([(6, 7), (6, 8), (6, 6), (7, 6), (7, 7), (8, 8), (8, 7), (8, 6), (7, 8)]), frozenset([(0, 1), (0, 0), (0, 7), (0, 6), (0, 5), (0, 4), (0, 3), (0, 8), (0, 2)]), frozenset([(1, 2), (1, 3), (1, 4), (1, 5), (1, 8), (1, 6), (1, 7), (1, 0), (1, 1)]), frozenset([(2, 7), (2, 6), (2, 8), (2, 1), (2, 0), (2, 3), (2, 2), (2, 5), (2, 4)]), frozenset([(3, 2), (3, 3), (3, 0), (3, 1), (3, 8), (3, 6), (3, 7), (3, 4), (3, 5)]), frozenset([(4, 7), (4, 6), (4, 8), (4, 5), (4, 4), (4, 3), (4, 2), (4, 1), (4, 0)]), frozenset([(5, 4), (5, 5), (5, 6), (5, 7), (5, 0), (5, 1), (5, 2), (5, 8), (5, 3)]), frozenset([(6, 4), (6, 7), (6, 8), (6, 6), (6, 1), (6, 0), (6, 3), (6, 2), (6, 5)]), frozenset([(7, 3), (7, 0), (7, 1), (7, 6), (7, 7), (7, 4), (7, 5), (7, 8), (7, 2)]), frozenset([(8, 3), (8, 2), (8, 1), (8, 0), (8, 8), (8, 7), (8, 6), (8, 5), (8, 4)]), frozenset([(0, 0), (7, 0), (3, 0), (8, 0), (6, 0), (2, 0), (5, 0), (1, 0), (4, 0)]), frozenset([(0, 1), (7, 1), (8, 1), (6, 1), (3, 1), (2, 1), (5, 1), (4, 1), (1, 1)]), frozenset([(1, 2), (3, 2), (8, 2), (6, 2), (2, 2), (4, 2), (5, 2), (0, 2), (7, 2)]), frozenset([(7, 3), (8, 3), (1, 3), (3, 3), (6, 3), (2, 3), (4, 3), (0, 3), (5, 3)]), frozenset([(6, 4), (5, 4), (4, 4), (1, 4), (7, 4), (0, 4), (3, 4), (2, 4), (8, 4)]), frozenset([(5, 5), (4, 5), (1, 5), (7, 5), (0, 5), (2, 5), (8, 5), (6, 5), (3, 5)]), frozenset([(2, 6), (4, 6), (6, 6), (5, 6), (7, 6), (0, 6), (1, 6), (3, 6), (8, 6)]), frozenset([(2, 7), (4, 7), (6, 7), (5, 7), (7, 7), (0, 7), (8, 7), (1, 7), (3, 7)]), frozenset([(6, 8), (4, 8), (2, 8), (3, 8), (1, 8), (8, 8), (0, 8), (7, 8), (5, 8)])]
OK. Let's see how fast we can solve some puzzle collections.
50 puzzles from Project Euler
Solving 50 puzzles took 1.372629 secs, avg: 0.02745258 sec
95 hard puzzles
Solving 95 puzzles took 56.663254 secs, avg: 0.596455305263 sec
Tests succesful!
         11258661 function calls (11254255 primitive calls) in 60.829 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.001    0.001    0.001    0.001 collections.py:1(<module>)
        1    0.000    0.000    0.000    0.000 collections.py:26(OrderedDict)
        1    0.000    0.000    0.000    0.000 collections.py:387(Counter)
        1    0.000    0.000    0.000    0.000 decorators.py:5(<module>)
        3    0.000    0.000    0.000    0.000 decorators.py:7(decorator)
        2    0.000    0.000    0.000    0.000 decorators.py:8(<lambda>)
        2    0.000    0.000    0.000    0.000 functools.py:17(update_wrapper)
        1    0.000    0.000    0.000    0.000 heapq.py:31(<module>)
        1    0.000    0.000    0.000    0.000 keyword.py:11(<module>)
 3094/152    0.129    0.000   60.291    0.397 sudoku.py:129(solve)
  1561/99    0.434    0.000   56.152    0.567 sudoku.py:146(bt)
    60454    0.048    0.000    0.048    0.000 sudoku.py:151(<lambda>)
     6347   21.977    0.003   22.857    0.004 sudoku.py:166(solve1)
     4880   12.956    0.003   16.772    0.003 sudoku.py:194(solve2)
     4880    7.984    0.002   15.952    0.003 sudoku.py:219(solve3)
  2400985    6.209    0.000    6.209    0.000 sudoku.py:232(<genexpr>)
      156    0.030    0.000    0.030    0.000 sudoku.py:264(initialize_get_containing_methods)
   785261    1.335    0.000    1.335    0.000 sudoku.py:284(get_containing_box)
      156    0.004    0.000    0.004    0.000 sudoku.py:286(initialize_peers)
    33454    0.058    0.000    0.058    0.000 sudoku.py:301(peers)
      156    0.001    0.000    0.001    0.000 sudoku.py:304(initialize_regions)
       90    0.000    0.000    0.000    0.000 sudoku.py:311(<genexpr>)
       90    0.000    0.000    0.000    0.000 sudoku.py:313(<genexpr>)
       90    0.000    0.000    0.000    0.000 sudoku.py:314(<genexpr>)
     3094    0.334    0.000   58.436    0.019 sudoku.py:319(repeat_until_stuck)
        1    0.001    0.001    0.003    0.003 sudoku.py:32(<module>)
    14720    0.130    0.000    0.391    0.000 sudoku.py:344(is_solved)
    74936    0.139    0.000    0.178    0.000 sudoku.py:347(<genexpr>)
     2955    0.019    0.000    0.335    0.000 sudoku.py:349(is_consistent)
   189721    0.153    0.000    0.153    0.000 sudoku.py:353(<genexpr>)
    14255    1.960    0.000    2.127    0.000 sudoku.py:357(get_table_hash)
    12363    0.037    0.000    0.055    0.000 sudoku.py:361(char_to_cand_list)
     2942    0.016    0.000    0.639    0.000 sudoku.py:376(copy_table)
     2942    0.334    0.000    0.616    0.000 sudoku.py:379(<dictcomp>)
        1    0.000    0.000    0.000    0.000 sudoku.py:39(SudokuError)
      156    0.105    0.001    0.377    0.002 sudoku.py:396(read_str)
      152    0.099    0.001    0.199    0.001 sudoku.py:408(check_table)
    13680    0.028    0.000    0.028    0.000 sudoku.py:419(<genexpr>)
        1    0.000    0.000    0.000    0.000 sudoku.py:42(SudokuInputError)
    82480    0.068    0.000    0.068    0.000 sudoku.py:426(<genexpr>)
        3    0.001    0.000    0.002    0.001 sudoku.py:431(__str__)
        1    0.000    0.000    0.000    0.000 sudoku.py:445(__repr__)
        1    0.000    0.000    0.000    0.000 sudoku.py:452(SudokuChild)
     2942    0.060    0.000    0.699    0.000 sudoku.py:453(__init__)
        1    0.000    0.000    0.000    0.000 sudoku.py:51(SudokuCollection)
        2    0.002    0.001    0.366    0.183 sudoku.py:53(__init__)
        2    0.080    0.040   60.371   30.185 sudoku.py:61(solve_all)
      294    0.000    0.000    0.000    0.000 sudoku.py:83(__getitem__)
        2    0.000    0.000    0.000    0.000 sudoku.py:86(__len__)
        1    0.000    0.000    0.000    0.000 sudoku.py:89(Sudoku)
      156    0.002    0.000    0.414    0.003 sudoku.py:94(__init__)
        1    0.006    0.006   60.829   60.829 sudoku_tests.py:3(<module>)
        1    0.004    0.004   60.820   60.820 sudoku_tests.py:6(test_sudoku_class)
    17675    0.229    0.000    0.540    0.000 {all}
       10    0.000    0.000    0.000    0.000 {getattr}
      468    0.000    0.000    0.000    0.000 {hasattr}
    14255    0.046    0.000    0.046    0.000 {hash}
     3094    0.004    0.000    0.004    0.000 {isinstance}
      188    0.000    0.000    0.000    0.000 {iter}
2747019/2747017    1.799    0.000    1.799    0.000 {len}
   614137    0.420    0.000    0.420    0.000 {method 'add' of 'set' objects}
  1877730    1.433    0.000    1.433    0.000 {method 'append' of 'list' objects}
      243    0.000    0.000    0.000    0.000 {method 'center' of 'str' objects}
   615330    0.483    0.000    0.483    0.000 {method 'clear' of 'set' objects}
     1561    0.015    0.000    0.015    0.000 {method 'copy' of 'dict' objects}
   239863    0.285    0.000    0.285    0.000 {method 'copy' of 'set' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        5    0.001    0.000    0.002    0.000 {method 'format' of 'str' objects}
      152    0.001    0.000    0.001    0.000 {method 'issubset' of 'set' objects}
    14255    0.121    0.000    0.121    0.000 {method 'items' of 'dict' objects}
     4503    0.009    0.000    0.009    0.000 {method 'iteritems' of 'dict' objects}
    17675    0.017    0.000    0.017    0.000 {method 'itervalues' of 'dict' objects}
     1520    0.003    0.000    0.003    0.000 {method 'keys' of 'dict' objects}
    33454    0.049    0.000    0.049    0.000 {method 'pop' of 'list' objects}
  1304800    1.040    0.000    1.040    0.000 {method 'remove' of 'set' objects}
      146    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
        2    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
    11890    0.024    0.000    0.024    0.000 {method 'write' of 'file' objects}
     1561    0.076    0.000    0.124    0.000 {min}
      188    0.000    0.000    0.000    0.000 {next}
        4    0.000    0.000    0.000    0.000 {open}
    17448    0.030    0.000    0.030    0.000 {range}
        1    0.000    0.000    0.000    0.000 {repr}
        6    0.000    0.000    0.000    0.000 {setattr}
        4    0.000    0.000    0.000    0.000 {time.clock}


